        -:    0:Source:/home/ray/Desktop/TheRayCode/CPP/Decorator/main.cpp
        -:    0:Graph:/home/ray/Desktop/TheRayCode/CPP/Decorator/cmake-build-debug-coverage/CMakeFiles/Decorator.dir/main.cpp.gcno
        -:    0:Data:/home/ray/Desktop/TheRayCode/CPP/Decorator/cmake-build-debug-coverage/CMakeFiles/Decorator.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:#include "ConcreteComponent.h"
        -:    3:#include "ConcreteDecoratorA.h"
        -:    4:#include "ConcreteDecoratorB.h"
        -:    5:
        2:    6:void ClientCode(Component* component) {
        -:    7:    // ...
        2:    8:    std::cout << "RESULT: " << component->Operation();
        2:    8-block  0
        2:    8-block  1
    $$$$$:    8-block  2
        -:    9:    // ...
        2:   10:}
        -:   11:
        1:   12:int main() {
        -:   13:    /**
        -:   14:     * This way the client code can support both simple components...
        -:   15:     */
        1:   16:    Component* simple = new ConcreteComponent;
        1:   16-block  0
        1:   17:    std::cout << "Client: I've got a simple component:\n";
        1:   18:    ClientCode(simple);
        1:   19:    std::cout << "\n\n";
        -:   20:    /**
        -:   21:     * ...as well as decorated ones.
        -:   22:     *
        -:   23:     * Note how decorators can wrap not only simple components but the other
        -:   24:     * decorators as well.
        -:   25:     */
        1:   26:    Component* decorator1 = new ConcreteDecoratorA(simple);
        1:   27:    Component* decorator2 = new ConcreteDecoratorB(decorator1);
        1:   28:    std::cout << "Client: Now I've got a decorated component:\n";
        1:   29:    ClientCode(decorator2);
        1:   30:    std::cout << "\n";
        -:   31:
        1:   32:    delete simple;
        1:   32-block  0
        1:   33:    delete decorator1;
        1:   33-block  0
        1:   33-block  1
        1:   34:    delete decorator2;
        1:   34-block  0
        1:   34-block  1
        -:   35:
        1:   36:    return 0;
        1:   36-block  0
        -:   37:}
